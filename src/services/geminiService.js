const { GoogleGenerativeAI } = require('@google/generative-ai');
const Summary = require('../models/Summary');
const Test = require('../models/Test');
require('dotenv').config();

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

async function generateSummaryFromText(text, userId, originalFileName) {
  const model = genAI.getGenerativeModel({ model: 'gemini-1.5-pro-latest' });

  const prompt = `–ü—Ä–æ—á–∏—Ç–∞–π —ç—Ç–æ—Ç —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏ —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç –Ω–∞ –ø–æ–Ω—è—Ç–Ω–æ–º —è–∑—ã–∫–µ.\n\n${text}`;

  const result = await model.generateContent({
    contents: [{ parts: [{ text: prompt }] }],
  });

  const response = await result.response;
  const summaryText = response.text().trim();

  await Summary.create({
    owner: userId,
    originalFileName,
    content: summaryText,
  });

  return summaryText;
}

async function generateTestFromText(text, userId, originalFileName) {
  const model = genAI.getGenerativeModel({ model: 'gemini-1.5-pro-latest' });

  const prompt = `–ü—Ä–æ—á–∏—Ç–∞–π —Å–ª–µ–¥—É—é—â–∏–π —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏ —Å–æ—Å—Ç–∞–≤—å —Ç–µ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. 
–¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
- title: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
- questions: –º–∞—Å—Å–∏–≤ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ–µ—Ç:
  - question: —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
  - options: –º–∞—Å—Å–∏–≤ –∏–∑ 3‚Äì4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
  - correctAnswer: –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0)

‚ùó –í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –±–µ–∑ –æ–±—Ä–∞–º–ª–µ–Ω–∏—è –≤ \`\`\`json –∏–ª–∏ –¥—Ä—É–≥–∏–µ –±–ª–æ–∫–∏. –ü—Ä–æ—Å—Ç–æ JSON.

–£—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:
---
${text}
`;

  const result = await model.generateContent({
    contents: [{ parts: [{ text: prompt }] }],
  });

  const response = await result.response;
  const raw = response.text();

  // üßπ –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ ```json ... ```
  const cleaned = raw
      .replace(/```json/g, '')
      .replace(/```/g, '')
      .trim();

  try {
    const parsed = JSON.parse(cleaned);

    const newTest = await Test.create({
      owner: userId,
      originalFileName,
      title: parsed.title,
      questions: parsed.questions,
    });

    return newTest;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', err.message);
    console.error('–û—Ç–≤–µ—Ç –æ—Ç Gemini:', raw);
    throw new Error('–û—Ç–≤–µ—Ç –ò–ò –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON');
  }
}

module.exports = {
  generateSummaryFromText,
  generateTestFromText,
};
